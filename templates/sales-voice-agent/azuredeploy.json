{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Sales Voice Copilot - Complete Azure Infrastructure with Centralized Agent Deployment",
    "author": "Microsoft AI Accelerate Team"
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "salesvoice",
      "minLength": 3,
      "maxLength": 11,
      "metadata": {
        "description": "Project name used to generate resource names (3-11 characters, lowercase letters and numbers only)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "East US",
        "East US 2",
        "Central US",
        "West US",
        "West US 2",
        "North Europe",
        "West Europe",
        "Southeast Asia",
        "East Asia",
        "Australia East",
        "UK South",
        "Canada Central"
      ],
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "manifestUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/YOUR-USERNAME/AI-AGENT-TEMPLATES/main/templates/sales-voice-agent/agent-manifest.json",
      "metadata": {
        "description": "URL to the agent manifest file"
      }
    },
    "agentLibraryUrl": {
      "type": "string",
      "defaultValue": "https://github.com/YOUR-USERNAME/AI-AGENT-TEMPLATES/archive/refs/heads/main.zip",
      "metadata": {
        "description": "URL to download the agent library"
      }
    },
    "azureOpenAIEndpoint": {
      "type": "string",
      "metadata": {
        "description": "Your Azure OpenAI endpoint (e.g., https://your-openai.openai.azure.com/)"
      }
    },
    "azureOpenAIApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Your Azure OpenAI API key"
      }
    },
    "azureOpenAIApiVersion": {
      "type": "string",
      "defaultValue": "2024-02-01",
      "metadata": {
        "description": "Azure OpenAI API version"
      }
    },
    "azureOpenAIDeploymentName": {
      "type": "string",
      "defaultValue": "gpt-4",
      "metadata": {
        "description": "Name of your GPT-4 deployment in Azure OpenAI"
      }
    },
    "enableDynamics365": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Dynamics 365 integration"
      }
    },
    "dynamics365Resource": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Your Dynamics 365 instance URL (e.g., https://yourorg.crm.dynamics.com)"
      }
    },
    "dynamics365ClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "App registration client ID for Dynamics 365 access"
      }
    },
    "dynamics365ClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "App registration client secret for Dynamics 365 access"
      }
    },
    "dynamics365TenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Azure AD tenant ID"
      }
    },
    "enableSharePoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable SharePoint integration for document processing"
      }
    },
    "sharePointSiteUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SharePoint site URL for document extraction"
      }
    },
    "sharePointClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "App registration client ID for SharePoint access"
      }
    },
    "sharePointClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "App registration client secret for SharePoint access"
      }
    },
    "sharePointTenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "SharePoint tenant ID"
      }
    },
    "enableVoiceServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Speech Services for voice capabilities"
      }
    },
    "speechServicesRegion": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "Region for Speech Services (defaults to resource location)"
      }
    },
    "assistantName": {
      "type": "string",
      "defaultValue": "Sales Voice Assistant",
      "metadata": {
        "description": "Display name for the assistant"
      }
    },
    "characteristicDescription": {
      "type": "string",
      "defaultValue": "An intelligent sales assistant that processes meeting transcripts and automatically updates CRM records, creating a seamless workflow from voice to action.",
      "metadata": {
        "description": "Description of the assistant's characteristics and behavior"
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Insights for monitoring and diagnostics"
      }
    },
    "functionAppSkuName": {
      "type": "string",
      "defaultValue": "Y1",
      "allowedValues": [
        "Y1",
        "EP1",
        "EP2",
        "EP3"
      ],
      "metadata": {
        "description": "Pricing tier for Function App (Y1 = Consumption, EP = Premium)"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account replication type"
      }
    },
    "fileShareQuota": {
      "type": "int",
      "defaultValue": 5120,
      "minValue": 1,
      "maxValue": 102400,
      "metadata": {
        "description": "File share size in GB"
      }
    },
    "tagEnvironment": {
      "type": "string",
      "defaultValue": "Production",
      "allowedValues": [
        "Development",
        "Test",
        "Staging",
        "Production"
      ],
      "metadata": {
        "description": "Environment tag for resources"
      }
    },
    "tagCostCenter": {
      "type": "string",
      "defaultValue": "Sales",
      "metadata": {
        "description": "Cost center tag for billing"
      }
    }
  },
  "variables": {
    "uniqueString": "[uniqueString(resourceGroup().id)]",
    "functionAppName": "[concat(parameters('projectName'), '-func-', variables('uniqueString'))]",
    "hostingPlanName": "[concat(parameters('projectName'), '-plan-', variables('uniqueString'))]",
    "applicationInsightsName": "[concat(parameters('projectName'), '-ai-', variables('uniqueString'))]",
    "storageAccountName": "[concat(toLower(parameters('projectName')), 'st', take(variables('uniqueString'), 6))]",
    "fileShareName": "[concat('azf', toLower(parameters('projectName')), take(variables('uniqueString'), 6))]",
    "keyVaultName": "[concat(parameters('projectName'), '-kv-', take(variables('uniqueString'), 6))]",
    "speechServicesName": "[concat(parameters('projectName'), '-speech-', variables('uniqueString'))]",
    "containerInstanceName": "[concat(parameters('projectName'), '-aci-deploy')]",
    "functionWorkerRuntime": "python",
    "pythonVersion": "3.9",
    "isPremiumPlan": "[not(equals(parameters('functionAppSkuName'), 'Y1'))]",
    "commonTags": {
      "Application": "Sales Voice Copilot",
      "Environment": "[parameters('tagEnvironment')]",
      "CostCenter": "[parameters('tagCostCenter')]",
      "ManagedBy": "ARM Template",
      "CreatedBy": "Microsoft AI Accelerate",
      "TemplateVersion": "2.0.0"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "shareDeleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2021-09-01",
      "name": "[concat(variables('storageAccountName'), '/default/', variables('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountName'), 'default')]"
      ],
      "properties": {
        "accessTier": "TransactionOptimized",
        "shareQuota": "[parameters('fileShareQuota')]",
        "metadata": {
          "purpose": "Sales Voice Agent Storage"
        }
      }
    },
    {
      "condition": "[parameters('enableApplicationInsights')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "RetentionInDays": 90,
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "sku": {
        "name": "[parameters('functionAppSkuName')]",
        "tier": "[if(variables('isPremiumPlan'), 'ElasticPremium', 'Dynamic')]",
        "size": "[parameters('functionAppSkuName')]",
        "family": "[if(variables('isPremiumPlan'), 'EP', 'Y')]",
        "capacity": "[if(variables('isPremiumPlan'), 1, 0)]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true,
        "maximumElasticWorkerCount": "[if(variables('isPremiumPlan'), 20, json('null'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/AzureOpenAIKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('azureOpenAIApiKey')]"
      }
    },
    {
      "condition": "[parameters('enableDynamics365')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/Dynamics365ClientSecret')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('dynamics365ClientSecret')]"
      }
    },
    {
      "condition": "[parameters('enableSharePoint')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/SharePointClientSecret')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('sharePointClientSecret')]"
      }
    },
    {
      "condition": "[parameters('enableVoiceServices')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2021-10-01",
      "name": "[variables('speechServicesName')]",
      "location": "[parameters('speechServicesRegion')]",
      "tags": "[variables('commonTags')]",
      "sku": {
        "name": "S0"
      },
      "kind": "SpeechServices",
      "properties": {
        "customSubDomainName": "[variables('speechServicesName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "reserved": true,
        "httpsOnly": true,
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey, '')]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString, '')]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionWorkerRuntime')]"
            },
            {
              "name": "PYTHON_VERSION",
              "value": "[variables('pythonVersion')]"
            },
            {
              "name": "AZURE_FILES_SHARE_NAME",
              "value": "[variables('fileShareName')]"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "[parameters('azureOpenAIEndpoint')]"
            },
            {
              "name": "AZURE_OPENAI_API_KEY",
              "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=AzureOpenAIKey)')]"
            },
            {
              "name": "AZURE_OPENAI_API_VERSION",
              "value": "[parameters('azureOpenAIApiVersion')]"
            },
            {
              "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
              "value": "[parameters('azureOpenAIDeploymentName')]"
            },
            {
              "name": "DYNAMICS_365_CLIENT_ID",
              "value": "[if(parameters('enableDynamics365'), parameters('dynamics365ClientId'), '')]"
            },
            {
              "name": "DYNAMICS_365_CLIENT_SECRET",
              "value": "[if(parameters('enableDynamics365'), concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=Dynamics365ClientSecret)'), '')]"
            },
            {
              "name": "DYNAMICS_365_TENANT_ID",
              "value": "[if(parameters('enableDynamics365'), parameters('dynamics365TenantId'), '')]"
            },
            {
              "name": "DYNAMICS_365_RESOURCE",
              "value": "[if(parameters('enableDynamics365'), parameters('dynamics365Resource'), '')]"
            },
            {
              "name": "DYNAMICS_365_ENABLED",
              "value": "[string(parameters('enableDynamics365'))]"
            },
            {
              "name": "SHAREPOINT_SITE_URL",
              "value": "[if(parameters('enableSharePoint'), parameters('sharePointSiteUrl'), '')]"
            },
            {
              "name": "SHAREPOINT_CLIENT_ID",
              "value": "[if(parameters('enableSharePoint'), parameters('sharePointClientId'), '')]"
            },
            {
              "name": "SHAREPOINT_CLIENT_SECRET",
              "value": "[if(parameters('enableSharePoint'), concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=SharePointClientSecret)'), '')]"
            },
            {
              "name": "SHAREPOINT_TENANT_ID",
              "value": "[if(parameters('enableSharePoint'), parameters('sharePointTenantId'), '')]"
            },
            {
              "name": "SHAREPOINT_ENABLED",
              "value": "[string(parameters('enableSharePoint'))]"
            },
            {
              "name": "SPEECH_SERVICES_KEY",
              "value": "[if(parameters('enableVoiceServices'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('speechServicesName')), '2021-10-01').key1, '')]"
            },
            {
              "name": "SPEECH_SERVICES_REGION",
              "value": "[if(parameters('enableVoiceServices'), parameters('speechServicesRegion'), '')]"
            },
            {
              "name": "SPEECH_SERVICES_ENABLED",
              "value": "[string(parameters('enableVoiceServices'))]"
            },
            {
              "name": "ASSISTANT_NAME",
              "value": "[parameters('assistantName')]"
            },
            {
              "name": "CHARACTERISTIC_DESCRIPTION",
              "value": "[parameters('characteristicDescription')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "true"
            },
            {
              "name": "KEY_VAULT_NAME",
              "value": "[variables('keyVaultName')]"
            },
            {
              "name": "ENVIRONMENT",
              "value": "[parameters('tagEnvironment')]"
            },
            {
              "name": "AGENT_MANIFEST_URL",
              "value": "[parameters('manifestUrl')]"
            },
            {
              "name": "MEMORY_PATH",
              "value": "[concat('/mnt/azurefiles/', variables('fileShareName'), '/memory')]"
            },
            {
              "name": "SHARED_MEMORY_PATH",
              "value": "[concat('/mnt/azurefiles/', variables('fileShareName'), '/shared_memories')]"
            }
          ],
          "linuxFxVersion": "Python|3.9",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "cors": {
            "allowedOrigins": [
              "https://portal.azure.com",
              "https://functions.azure.com",
              "https://teams.microsoft.com"
            ],
            "supportCredentials": true
          },
          "powerShellVersion": "",
          "pythonVersion": "3.9",
          "nodeVersion": "",
          "use32BitWorkerProcess": false,
          "alwaysOn": "[variables('isPremiumPlan')]"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(resourceGroup().id, variables('functionAppName'), 'KeyVaultSecretsUser')]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2021-03-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(resourceGroup().id, variables('functionAppName'), 'StorageBlobDataContributor')]",
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2021-03-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2021-09-01",
      "name": "[variables('containerInstanceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', variables('storageAccountName'), 'default', variables('fileShareName'))]"
      ],
      "properties": {
        "containers": [
          {
            "name": "agent-deployer",
            "properties": {
              "image": "mcr.microsoft.com/azure-cli:latest",
              "command": [
                "/bin/bash",
                "-c",
                "[concat('apt-get update && apt-get install -y curl unzip && ', 'curl -L ', parameters('agentLibraryUrl'), ' -o agents.zip && ', 'unzip agents.zip && ', 'cd AI-AGENT-TEMPLATES-main && ', 'az storage directory create --name agents --share-name ', variables('fileShareName'), ' --account-name ', variables('storageAccountName'), ' --account-key ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value, ' && ', 'curl -s ', parameters('manifestUrl'), ' -o manifest.json && ', 'for agent in $(cat manifest.json | grep -oP ''\"required\"\\s*:\\s*\\[[^]]+\\]'' | grep -oP ''\"[^\"]+\"'' | grep -v required | tr -d ''\"\\''); do ', 'agent_path=$(echo $agent | tr ''/'' ''_'').py; ', 'if [ -f agents/$agent.py ]; then ', 'az storage file upload --share-name ', variables('fileShareName'), ' --source agents/$agent.py --path agents/$(basename $agent).py --account-name ', variables('storageAccountName'), ' --account-key ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value, '; ', 'fi; ', 'done && ', 'echo \"Agent deployment completed\"')]"
              ],
              "resources": {
                "requests": {
                  "cpu": 1.0,
                  "memoryInGB": 1.5
                }
              }
            }
          }
        ],
        "osType": "Linux",
        "restartPolicy": "OnFailure"
      }
    }
  ],
  "outputs": {
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName)]"
    },
    "functionEndpoint": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName, '/api/businessinsightbot_function')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "fileShareName": {
      "type": "string",
      "value": "[variables('fileShareName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[if(parameters('enableApplicationInsights'), variables('applicationInsightsName'), 'Not deployed')]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey, 'Not available')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "speechServicesName": {
      "type": "string",
      "value": "[if(parameters('enableVoiceServices'), variables('speechServicesName'), 'Not deployed')]"
    },
    "speechServicesEndpoint": {
      "type": "string",
      "value": "[if(parameters('enableVoiceServices'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('speechServicesName')), '2021-10-01').endpoint, 'Not available')]"
    },
    "nextSteps": {
      "type": "object",
      "value": {
        "1_AgentDeployment": "Agents are being deployed automatically from the central library",
        "2_DeployCode": "Deploy the Python function code to the Function App using VS Code, Azure CLI, or GitHub Actions",
        "3_ConfigureCopilot": "Import the Copilot Studio solution and configure it with the function endpoint URL",
        "4_TestEndpoint": "Test the function endpoint with: curl -X POST [functionEndpoint] -H 'Content-Type: application/json' -d '{\"user_input\": \"Hello\", \"conversation_history\": []}'",
        "5_TestVoice": "Test voice commands in Teams: 'Process my meeting transcripts and update CRM'",
        "6_MonitorLogs": "Monitor performance and logs in Application Insights",
        "7_Documentation": "Access the full implementation guide at: https://github.com/YOUR-USERNAME/AI-AGENT-TEMPLATES"
      }
    },
    "deploymentInfo": {
      "type": "object",
      "value": {
        "templateVersion": "2.0.0",
        "deploymentTime": "[utcNow()]",
        "resourceGroup": "[resourceGroup().name]",
        "subscription": "[subscription().subscriptionId]",
        "environment": "[parameters('tagEnvironment')]",
        "agentManifest": "[parameters('manifestUrl')]"
      }
    }
  }
}
